<?php
/**
 *  Copyright 2015 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

{{#models}}
{{#model}}
/**
 * {{description}}
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 *
 */

namespace {{invokerPackage}}\models;

use \ArrayAccess;

class {{classname}} implements ArrayAccess {
  static $swaggerTypes = array(
      {{#vars}}'{{name}}' => '{{{datatype}}}'{{#hasMore}},
      {{/hasMore}}{{/vars}}
  );

  static $attributeMap = array(
      {{#vars}}'{{name}}' => '{{baseName}}'{{#hasMore}},
      {{/hasMore}}{{/vars}}
  );

  // keeps track of which values are set.  Important when you don't want to submit every value.
  public $hasValue  = array();

  // lets us keep $hasValue in sync when doing $this->somevar = 1;
  private $storage  = array();

  /**
   * Variables (if any){{#vars}}
   * {{name}} {{datatype}}{{#description}}
   *     {{{description}}}{{/description}}{{/vars}}
   */

  public function __construct(array $data = null) {
{{#vars}}    $this->setIfExists("{{name}}", $data);
{{/vars}}
  }

  private function setIfExists($name, $data) {
    if (null !== $data && array_key_exists($name, $data)) {
      $this->$name = $data[$name];
    } else {
      $this->hasValue[$name] = false;
    }
  }

  public function __get($name) {
    $value = null;
    if (! array_key_exists($name, self::$attributeMap)) {
      $trace = debug_backtrace();
      trigger_error(
          'Undefined property via __get(): ' . $name .
          ' in ' . $trace[0]['file'] .
          ' on line ' . $trace[0]['line'],
          E_USER_NOTICE);
    } else {
      if ($this->hasValue[$name]) {
        $value = $this->storage[$name];
      }
    }
    return $value;
  }

  public function __set($name, $value) {
    $this->storage[$name]  = $value;
    $this->hasValue[$name] = true;
  }

  public function __unset($name) {
    if ($this->hasValue[$name]) {
      $this->hasValue[$name] = false;
      unset($storage[$name]);
    }
  }

  public function __isset($name) {
    $value = false;
    if ($this->hasValue[$name]) {
      $value = isset($this->storage[$name]);
    }
    return $value;
  }
  public function offsetExists($offset) {
    return isset($this->$offset);
  }

  public function offsetGet($offset) {
    return $this->$offset;
  }

  public function offsetSet($offset, $value) {
    $this->$offset = $value;
  }

  public function offsetUnset($offset) {
    unset($this->$offset);
  }
}
{{/model}}
{{/models}}
